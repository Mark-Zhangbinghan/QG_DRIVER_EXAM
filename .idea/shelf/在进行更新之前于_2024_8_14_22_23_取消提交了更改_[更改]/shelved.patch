Index: add_json.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport numpy as np\r\nfrom CAV.code.starter import main\r\n\r\n\r\n# class Car:\r\n#     def __init__(self, car_num, speed, start_position, end_position):\r\n#         self.car_num = car_num\r\n#         self.speed = speed\r\n#         self.start_position = start_position\r\n#         self.end_position = end_position\r\n#         self.path = []\r\n#         self.relative_time = 0.0\r\n\r\n# e版本\r\n# cars = start_simulation(10, vertices, edges)\r\n\r\ndef cars_to_file(cars_list, add_z=-3):\r\n    car_list_json = []\r\n    for car in cars_list:\r\n        # 转换路径为所需的格式\r\n        path_list = [{\"x\": point['coords'][0], \"y\": point['coords'][1], \"z\": add_z} for point in car['path']]\r\n\r\n        # 构建车辆的字典\r\n        car_dict = {\r\n            \"car_num\": car['car_num'],\r\n            \"speed\": car['speed'],\r\n            \"path\": path_list\r\n        }\r\n        car_list_json.append(car_dict)\r\n    # 转成json\r\n    json_output = json.dumps({\"CarList\": car_list_json}, indent=2)\r\n    filename = 'cars_data.json'\r\n    # 打开文件，准备写入\r\n    with open(filename, 'w', encoding='utf-8') as file:\r\n        file.write(json_output)\r\n    print(f'JSON数据已成功写入到文件：{filename}')\r\n\r\n\r\ndef cars_to_json(cars_list, add_z=-3):\r\n    car_list_json = []\r\n    for car in cars_list:\r\n        # 转换路径为所需的格式\r\n        path_list = [{\"x\": point['coords'][0], \"y\": point['coords'][1], \"z\": add_z} for point in car['path']]\r\n\r\n        # 构建车辆的字典\r\n        car_dict = {\r\n            \"speed\": car['speed'],\r\n            \"path\": path_list\r\n        }\r\n        car_list_json.append(car_dict)\r\n    return car_list_json\r\n\r\n\r\n# cars = run_simulation(G=G, total_cars=10, round_num=1, speed=0.5)\r\n# cars_to_json(cars)\r\n\r\ndef mat_hot_point(weights):\r\n    dot_list_json = []\r\n    for weight_key, weight_value in weights.items():\r\n        # 这里的权重列表中的每个条目是一个字典\r\n        dot_dict = {\r\n            \"x\": weight_value['pos'][0],\r\n            \"y\": weight_value['pos'][1],\r\n            \"z\": weight_value['weight']\r\n        }\r\n        dot_list_json.append(dot_dict)\r\n    return dot_list_json\r\n\r\n\r\n# 创建user_path的空json\r\ndef user_null_json():\r\n    path_nodes = []\r\n    node_dict = {\r\n        \"x\": None,\r\n        \"y\": None,\r\n        \"z\": None\r\n    }\r\n    path_nodes.append(node_dict)  # 创建空json\r\n    path_pos = {\r\n        \"PathNodes\": path_nodes  # 修改成图形要的格式\r\n    }\r\n    return path_pos\r\n\r\n\r\n# 存储json文件\r\ndef json_to_file(filename, json_dict):\r\n    json_output = json.dumps(json_dict, indent=2)\r\n    with open(filename, 'w', encoding='utf-8') as file:\r\n        file.write(json_output)\r\n    print(f'path_json数据已成功写入到文件：{filename}')\r\n\r\n\r\ndef sub_path_json(pos):\r\n    all_paths = []\r\n    for car in range(pos.shape[1]):\r\n        car_path = []\r\n        for point in range(pos.shape[0]):\r\n            x = pos[point, car, 0]\r\n            y = pos[point, car, 1]\r\n            z = 0.55\r\n            car_path.append({\"x\": x, \"y\": y, \"z\": z})\r\n        all_paths.append({\"path\": car_path})\r\n    return all_paths\r\n\r\n\r\n# 合并微观图列表然后保存到文件\r\ndef concatenate_arrays(arrays_list, file_name):\r\n    # 过滤掉空列表，只保留numpy数组\r\n    non_empty_arrays = [arr for arr in arrays_list if isinstance(arr, np.ndarray) and arr.size > 0]\r\n\r\n    # 如果过滤后的数组列表为空，则跳过保存操作\r\n    if not non_empty_arrays:\r\n        print(\"没有非空的NumPy数组，跳过保存。\")\r\n        return\r\n\r\n    # 检查所有非空数组的第一维和第三维形状是否一致\r\n    first_shape = non_empty_arrays[0].shape[0]\r\n    third_shape = non_empty_arrays[0].shape[2]\r\n    for arr in non_empty_arrays:\r\n        if arr.shape[0] != first_shape or arr.shape[2] != third_shape:\r\n            raise ValueError(\"非空数组中存在形状不一致的情况\")\r\n\r\n    # 合并非空数组，沿着第二维（车辆数）进行合并\r\n    concatenated_array = np.concatenate(non_empty_arrays, axis=1)\r\n\r\n    # 保存合并后的数组\r\n    np.save(file_name, concatenated_array)\r\n    print(f\"已保存合并后的数组到 {file_name}\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/add_json.py b/add_json.py
--- a/add_json.py	(revision 9f0ed0ddb565c4eb2dc6b9f292dd17142ccb5d6f)
+++ b/add_json.py	(date 1723644646533)
@@ -124,6 +124,9 @@
     # 合并非空数组，沿着第二维（车辆数）进行合并
     concatenated_array = np.concatenate(non_empty_arrays, axis=1)
 
-    # 保存合并后的数组
-    np.save(file_name, concatenated_array)
-    print(f"已保存合并后的数组到 {file_name}")
+    # 四舍五入到三位小数
+    rounded_array = np.round(concatenated_array, decimals=3)
+
+    # 保存四舍五入后的数组
+    np.save(file_name, rounded_array)
+    print(f"已保存四舍五入到三位小数的合并后的数组到 {file_name}")
Index: Vertices_Weight_create/draw_map.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Vertices_Weight_create/draw_map.py b/Vertices_Weight_create/draw_map.py
new file mode 100644
--- /dev/null	(date 1723644159531)
+++ b/Vertices_Weight_create/draw_map.py	(date 1723644159531)
@@ -0,0 +1,71 @@
+import numpy as np
+import pandas as pd
+import networkx as nx
+import matplotlib.pyplot as plt
+
+plt.rcParams['font.sans-serif'] = ['SimHei']  # 显示中文标签
+plt.rcParams['axes.unicode_minus'] = False  # 设置正常显示符号
+
+
+# 寻找相邻结点函数
+def find_neighbors(num_list, neighbor_list):
+    neighbors = []
+    count = 1
+    for num, neighbor in zip(num_list, neighbor_list):
+        neighbor_ids = neighbor.split('、')  # 分割邻居结点序号
+        for id in neighbor_ids:
+            neighbors.append((num, int(id), str(count)))
+            count += 1
+    return neighbors
+
+
+# 建立结点G
+def get_vertices(data_path):
+    data = pd.read_excel(data_path)
+
+    # 提取 X_Coordinate、Y_Coordinate 和 Name 列
+    x_data = data['X_Coordinate']
+    y_data = data['Y_Coordinate']
+    nums = data['Num']
+    names = data['Name']
+    connect = data['Connect']
+    weights = data['Weight']
+    Edges = find_neighbors(nums, connect)
+
+    # 创建字典
+    Vertices = {num: (x, y) for num, x, y in zip(nums, x_data, y_data)}
+
+    # 创建图
+    G = nx.Graph()
+    for node, pos in Vertices.items():
+        G.add_node(node, pos=pos)
+    for edge in Edges:
+        G.add_edge(edge[0], edge[1], road=edge[2])
+        pos1 = Vertices[edge[0]]
+        pos2 = Vertices[edge[1]]
+        distance = np.sqrt((pos1[0] - pos2[0]) ** 2 + (pos1[1] - pos2[1]) ** 2)
+        G.edges[edge[0], edge[1]]['length'] = distance
+
+    # 设置节点属性
+    nx.set_node_attributes(G, Vertices, 'pos')
+
+    # 设置节点权重
+    node_weights = {num: weight for num, weight in zip(nums, weights)}
+    nx.set_node_attributes(G, node_weights, 'weight')
+
+    # # 绘制图
+    # pos = nx.get_node_attributes(G, 'pos')
+    # nx.draw(G, pos=pos, with_labels=False, node_color='lightblue', edge_color='gray', node_size=200)
+    #
+    # # 设置节点标签
+    # labels = {node: node for node in G.nodes()}
+    # nx.draw_networkx_labels(G, pos, labels, font_size=6)  # 设置字体大小为 12
+    #
+    # plt.show()
+
+    return G
+
+
+if __name__ == '__main__':
+    data_path = 'node_data.xlsx'
+    G = get_vertices(data_path)
Index: web.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import asyncio\r\nfrom fastapi import FastAPI, File, UploadFile, WebSocket\r\nfrom fastapi import Request\r\nimport uvicorn\r\nimport json\r\nimport numpy as np\r\n# 自定函数\r\nfrom end_dijkstra import run_simulation\r\nfrom Vertices_Weight_create.create_Vertices import G\r\nfrom add_json import cars_to_json, cars_to_file, mat_hot_point, user_null_json, json_to_file, sub_path_json, \\\r\n    concatenate_arrays\r\n# import e自带data_path,weights\r\nfrom road import data_path, e_weights\r\nfrom road import user_defined_path_selection\r\nfrom CAV.code.starter import main\r\n\r\napp = FastAPI()\r\ncar_cnt = 0  # 车辆计数器\r\nweights_cnt = 0\r\ncars = []  # 全局列表cars\r\nweights = []  # 全局列表weight\r\n# 初始化user_path.json\r\norigin_path = user_null_json()  # 创建空json\r\norigin_filename = 'user_path.json'\r\njson_to_file(filename=origin_filename, json_dict=origin_path)  # 调用函数写进文件\r\nprint(\"初始化user_path.json成功\")\r\n\r\n# 使用main算出路径参数\r\n\r\n'''all_arrays = main()\r\nno_n_arrays = all_arrays[:len(all_arrays) // 2]\r\nwith_n_arrays = all_arrays[len(all_arrays) // 2:]\r\n\r\nconcatenate_arrays(no_n_arrays, 'concatenated_no_n.npy')\r\nconcatenate_arrays(with_n_arrays, 'concatenated_with_n.npy')'''\r\n# 保存带 n 的数组\r\nconcatenated_no_n = np.load('concatenated_no_n.npy', allow_pickle=True)\r\n\r\n# 读取带 n 的合并后的数组\r\nconcatenated_with_n = np.load('concatenated_with_n.npy', allow_pickle=True)\r\n\r\n# 打印数组的shape来验证\r\nprint(\"不带 n 的数组形状:\", concatenated_no_n.shape)\r\nprint(\"带 n 的数组形状:\", concatenated_with_n.shape)\r\nno_n_num = concatenated_no_n.shape[1]\r\nn_num = concatenated_with_n.shape[1]\r\n# pos_v11, pos_v12, pos_v11n, pos_v12n = main()\r\n# # 第一轮\r\n# all_path_v11 = sub_path_json(pos_v11)\r\n# v11_num = len(all_path_v11)\r\n# all_path_v12 = sub_path_json(pos_v12)\r\n# v12_num = len(all_path_v12)\r\n# # 第二轮\r\n# all_path_v11n = sub_path_json(pos_v11n)\r\n# v11n_num = len(all_path_v11n)\r\n# all_path_v12n = sub_path_json(pos_v12n)\r\n# v12n_num = len(all_path_v12n)\r\nsub_car_cnt = 0  # 微观图车辆计数器\r\n\r\n\r\n# 判断连接是否成功路由\r\n@app.get('/')\r\n@app.post('/')\r\n@app.put('/')\r\n@app.delete('/')\r\nasync def read_root():\r\n    return {\"Connect Succeed\"}\r\n\r\n\r\n# 推送车辆数量路由\r\n@app.put('/put_car')\r\nasync def put_car(get_params: Request):  # 要在url中写参数而不是请求体\r\n    global cars\r\n    global weights\r\n    car_num = 10  # 预设被运算车辆的数量\r\n    params = get_params.query_params\r\n    car_num = params.get('car_num')\r\n    if car_num and car_num.isdigit():  # 判断能否转换成整数\r\n        car_num = int(car_num)  # 将字符串转换为整数\r\n    else:\r\n        car_num = -1  # 表示转换失败\r\n    print(car_num)\r\n    # 转换成功\r\n    if car_num == -1:\r\n        return {\"need int\"}\r\n    else:\r\n        # 根据接受到的car_num先计算宏观路径\r\n        cars, weights = run_simulation(G=G, total_cars=car_num, round_num=1, speed=0.5)  # 直接计算path然后存成字典列表\r\n        # 存成文件方便检查\r\n        cars_to_file(cars)\r\n        for weight in weights:\r\n            print(weight)\r\n        return {\"put succeed\"}\r\n\r\n\r\n# 获得微观图路口数量\r\n@app.put('/put_path_num')\r\nasync def put_path_num(get_params: Request):  # 要在url中写参数而不是请求体\r\n    path_num = 4  # 预设岔路的数量\r\n    params = get_params.query_params\r\n    path_num = params.get('path_num')\r\n    if path_num and path_num.isdigit():  # 判断能否转换成整数\r\n        path_num = int(path_num)  # 将字符串转换为整数\r\n    else:\r\n        path_num = -1  # 表示转换失败\r\n    print(path_num)\r\n    if path_num == -1:\r\n        return {\"need int\"}\r\n    else:\r\n        return {\"put succeed\"}\r\n\r\n\r\n# 获取车辆路径路由\r\n@app.get(\"/get_path\")\r\nasync def get_path():  # 要在body中写参数\r\n    global car_cnt\r\n    car_list = cars_to_json(cars, add_z=-3)\r\n    print(\"car:\")\r\n    print(\"cnt/len\")\r\n    print(car_cnt + 1, \"/\", len(car_list))\r\n    if car_cnt >= len(car_list):\r\n        car_cnt = 0\r\n    car_data = car_list[car_cnt]\r\n    car_cnt += 1\r\n    return car_data  # 直接返回字典\r\n\r\n\r\n@app.get(\"/get_weights\")\r\nasync def get_weights():\r\n    global weights_cnt\r\n    if weights_cnt >= len(weights):\r\n        weights_cnt = 0\r\n    weight_data = weights[weights_cnt]\r\n    print(\"weights:\")\r\n    print(\"cnt/len\")\r\n    print(weights_cnt + 1, \"/\", len(weights))\r\n    dot_json = mat_hot_point(weight_data)\r\n    weight_pos = {\r\n        \"PosWeight\": dot_json  # 修改成图形要的格式\r\n    }\r\n    weights_cnt += 1\r\n    return weight_pos  # 直接返回字典\r\n\r\n\r\n@app.websocket(\"/ws_weights\")\r\nasync def ws_weights(websocket: WebSocket):\r\n    await websocket.accept()\r\n    weight_cnt = 0\r\n    try:\r\n        while True:\r\n            print(weight_cnt)\r\n            print(len(weights))\r\n            if weight_cnt >= len(weights):\r\n                weight_cnt = 0  # 重置索引\r\n            # 提取一次列表\r\n            weight_data = weights[weight_cnt]\r\n            # 转成json\r\n            dot_json = mat_hot_point(weight_data)\r\n            json_data = json.dumps(dot_json)\r\n            await websocket.send_text(json_data)\r\n            weight_cnt += 1\r\n            await asyncio.sleep(0.5)\r\n    except Exception as e:\r\n        # 处理异常，例如连接关闭\r\n        print(f\"Websocket closed: {e}\")\r\n\r\n\r\n# 前端发请求和json运行用户自设路径\r\n@app.put(\"/put_user_path\")\r\nasync def put_path(path_request: Request):\r\n    path_json = await path_request.json()\r\n    start_point = int(path_json[\"start_point\"])\r\n    end_point = int(path_json[\"end_point\"])\r\n    is_driving = path_json[\"is_driving\"]  # 判断是否运行flag\r\n    if is_driving == 1:\r\n        user_path = user_defined_path_selection(data_path=data_path, weights=e_weights, start_node=start_point,\r\n                                                end_node=end_point)  # 调用e函数求路径\r\n        path_nodes = []\r\n        for node in user_path:\r\n            node_dict = {\r\n                \"x\": node[0],\r\n                \"y\": node[1],\r\n                \"z\": 0\r\n            }\r\n            path_nodes.append(node_dict)\r\n        path_pos = {\r\n            \"PathNodes\": path_nodes  # 修改成图形要的格式\r\n        }\r\n    else:\r\n        path_pos = user_null_json()  # 调用函数求空json\r\n    filename = 'user_path.json'\r\n    json_to_file(filename=filename, json_dict=path_pos)  # 调用函数写进文件\r\n    if is_driving == 1:\r\n        return {\"running successfully\"}\r\n    else:\r\n        return {\"stopped successfully\"}\r\n\r\n\r\n# 图形重复发请求获取\r\n@app.get(\"/get_user_path\")\r\nasync def get_user_path():\r\n    filename = 'user_path.json'\r\n    with open(filename, 'r', encoding='utf-8') as file:\r\n        path_data = file.read()\r\n        path_json = json.loads(path_data)\r\n    return path_json\r\n\r\n\r\n@app.get(\"/get_sub_num\")\r\nasync def get_sub_num():\r\n    num_dict = {\r\n        \"x\": no_n_num,\r\n        \"y\": n_num\r\n    }\r\n    return num_dict\r\n\r\n\r\n@app.get(\"/get_sub_path\")\r\nasync def get_sub_path():\r\n    no_n_list = sub_path_json(concatenated_no_n)\r\n    n_list = sub_path_json(concatenated_with_n)\r\n    global sub_car_cnt\r\n    switch_mode = 0  # 0是红灯前,1是红灯后\r\n    if sub_car_cnt >= no_n_num and switch_mode == 0:\r\n        switch_mode = 1  # 切换模式\r\n        sub_car_cnt = 0\r\n    if sub_car_cnt >= n_num and switch_mode == 1:\r\n        switch_mode = 0\r\n        sub_car_cnt = 0\r\n    print(\"sub_car:\")\r\n    print(\"cnt/len\")\r\n    if switch_mode == 0:\r\n        print(sub_car_cnt + 1, \"/\", no_n_num)\r\n        sub_car_json = no_n_list[sub_car_cnt]\r\n    else:\r\n        print(sub_car_cnt + 1, \"/\", n_num)\r\n        sub_car_json = n_list[sub_car_cnt]\r\n    return sub_car_json\r\n\r\n\r\n# 主监听函数\r\nif __name__ == \"__main__\":\r\n    # uvicorn.run(app=\"web:app\", host=\"192.168.0.92\", port=8080, reload=False)#华为云\r\n    uvicorn.run(app=\"web:app\", host=\"127.0.0.1\", port=8080, reload=False)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web.py b/web.py
--- a/web.py	(revision 9f0ed0ddb565c4eb2dc6b9f292dd17142ccb5d6f)
+++ b/web.py	(date 1723645143805)
@@ -25,14 +25,14 @@
 json_to_file(filename=origin_filename, json_dict=origin_path)  # 调用函数写进文件
 print("初始化user_path.json成功")
 
-# 使用main算出路径参数
-
-'''all_arrays = main()
-no_n_arrays = all_arrays[:len(all_arrays) // 2]
-with_n_arrays = all_arrays[len(all_arrays) // 2:]
-
-concatenate_arrays(no_n_arrays, 'concatenated_no_n.npy')
-concatenate_arrays(with_n_arrays, 'concatenated_with_n.npy')'''
+# # 使用main算出路径参数
+#
+# all_arrays = main()
+# no_n_arrays = all_arrays[:len(all_arrays) // 2]
+# with_n_arrays = all_arrays[len(all_arrays) // 2:]
+#
+# concatenate_arrays(no_n_arrays, 'concatenated_no_n.npy')
+# concatenate_arrays(with_n_arrays, 'concatenated_with_n.npy')
 # 保存带 n 的数组
 concatenated_no_n = np.load('concatenated_no_n.npy', allow_pickle=True)
 
